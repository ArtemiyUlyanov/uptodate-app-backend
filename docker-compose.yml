version: '3.8'

services:
  mysql:
    image: mysql:8
    container_name: mysql-db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: "uptodate"
      MYSQL_PASSWORD: ""
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
    restart: always

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000" # S3 API
      - "9001:9001" # Консоль MinIO
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: admin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
      - ./minio_cors.json:/root/.minio/minio_cors.json
    networks:
      - app-network

  app:
    build: .
    container_name: spring-boot-app
    depends_on:
      - mysql
      - redis
      - minio
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/uptodate
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD:
      SPRING_JPA_HIBERNATE_DDL-AUTO: update
      SPRING_JPA_HIBERNATE_DIALECT: org.hibernate.dialect.MySQL8Dialect
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      CLOUD_AWS_S3_ENDPOINT: http://minio:9000
      CLOUD_AWS_S3_BUCKET: photos
      CLOUD_AWS_S3_ACCESS_KEY: admin
      CLOUD_AWS_S3_SECRET_KEY: admin123
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_DATA_SOLR_HOST: http://solr:8983/solr
    ports:
      - "8080:8080"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql-data:
    driver: local
  minio-data: